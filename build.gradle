import org.gradle.util.internal.VersionNumber

buildscript {
    ext {
        //Ref : https://developer.android.com/build/releases/past-releases
        agp_gradle = libs.versions.agp.version.get()
        kotlin_version = "1.9.21"
        // coroutine
        coroutine_version = "1.6.4"

        koin_version = libs.versions.koin.version.get()
        //DB : Room
        room_version = "2.3.0"
//        realm_version =  libs.versions.realm.get()
        jb_compose_version = libs.versions.compose.version.get()

        compileSdkVersion = 31
        compileSdk = compileSdkVersion
        targetSdkVersion = compileSdk
        targetSdk = targetSdkVersion
        minSdkVersion = 21
        minSdk = minSdkVersion
    }
    println "Show  kotlin_version  : ${kotlin_version}"
    def kotlin = ext.get("kotlin.version")
    println "Show  kotlin_version from gradle.properties : ${kotlin}"
    def kotlin_v = libs.versions.kotlin.version.get()
    println "Show  kotlin_version from lib.version.toml : ${kotlin_v}"
    repositories {
        gradlePluginPortal()
        mavenCentral()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url = uri('https://maven.pkg.jetbrains.space/public/p/compose/dev')
        }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$agp_gradle"
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
//        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "io.realm:realm-gradle-plugin:10.11.1"
//        classpath "${libs.plugins.realm.get()}"
//        classpath "io.realm.kotlin:gradle-plugin:1.13.0"
        classpath "io.github.skeptick.libres:gradle-plugin:1.2.2" //i18n
    }
}

//Ref : https://stackoverflow.com/questions/37555196/in-gradle-how-to-use-a-variable-for-a-plugin-version

plugins {
    id 'org.jetbrains.kotlin.android' version "${kotlin_version}" apply false
    id "org.jetbrains.kotlin.jvm" version "${kotlin_version}" apply false
    //apply plugin: "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.multiplatform" version "${kotlin_version}" apply false
    //apply plugin: "org.jetbrains.kotlin.multiplatform"
    id "org.jetbrains.kotlin.plugin.serialization" version "${kotlin_version}" apply false
    //apply plugin: "org.jetbrains.kotlin.plugin.serialization"
    id "org.jetbrains.compose" version "${jb_compose_version}" apply false
    alias(libs.plugins.i18n.skeptick.libres) apply false
    //    id 'io.realm.kotlin' version "${realm_version}" apply false
}

allprojects {
    //https://www.baeldung.com/java-comparing-versions
    println "Show  current define room version  : ${room_version}"
    def room_version = VersionNumber.parse(room_version)
    def target_room_version = VersionNumber.parse("2.4.0-alpha03")
    println "Show  current define room ver  : ${room_version.minor}"
    println "Show  target_room_version  : ${target_room_version.minor}"
    println "Show  compareTo  : ${room_version.compareTo(target_room_version)}"
}

//task runDomainTests(dependsOn: [':domain:test']) {
//    description 'Run tests for the domain layer.'
//}

//task runDataTests(dependsOn: [':data:cleanTestDebugUnitTest', ':data:testDebugUnitTest', 'data:connectedAndroidTest']) {
//    description 'Run tests for the data layer.'
//}

//task runAllTests(dependsOn: ['runDomainTests',
//                             'runDataTests',
//                             'presentation:cleanTestDebugUnitTest',
//                             'presentation:testDebugUnitTest',
//                             ':presentation:connectedAndroidTest']) {
//
//    description 'Run application tests.'
//}

task clean(type: Delete) {
    delete rootProject.buildDir
}